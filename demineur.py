# Etape 1
# Pour commencer, avant de pouvoir poser nos bombes, il nous faut une grille et par cons√©quent une fonction g√©n√©ratrice de grille.
#
import random

from six import print_


def generate_grid(M, N):
    # creation d'une liste vide
    grid: list = []
    # pour chaque rang√©e selon le nb M, cr√©ation d'une liste row
    for x in range(M):
        row: list = []
        # pour chaque √©l√©ment de row, on ajoute un 0 dedans selon le nb N
        for y in range(N):
            row.append("‚¨õ")
        # maintenant on ajoute chaque rang√©e √† la liste grid
        grid.append(row)
    # on retourne la liste (de taille M) de listes (toutes de taille N)
    return grid

def print_grid(grid):
    # pour chaque petite liste de la liste parent, on joint les √©l√©ments
    # on les s√©pare avec un | et on print la liste
    # ainsi chaque rang√©e apparait en dessoous de la pr√©c√©dente, cr√©ant une grille visuelle
    for row in grid:
        print(" | ".join(row))

grid = generate_grid(3, 3)

# print_grid(grid)

# Notre g√©n√©rateur de grille pourrait, √† partir d'une taille de c√¥t√© M - ou 2 tailles (M,N) pour une
# grille rectangulaire -, g√©n√©rer une superbe grille. Remplie de 0 par exemple pour simplifier le cot√© "vide".
# Et qui pourrait, √† partir d'un entier K, g√©n√©rer une grille (superbe rappelons-le) parsem√©e de K merveilleuses cases pleines
# (ou noires, ou True, ou X) dans un oc√©an de M*N-K cases vides (ou blanches, ou False). Ces K cases pleines seraient,
# r√©parties al√©atoirement sur la grille.
# G√©n√©rer cette grille en ligne de commande en python.

def generate_mixed_grid(M, N, K):
    # creation d'une liste vide
    grid: list = []
    # cr√©ation d'une liste contenant toutes les cases qu'on va utiliser pour piocher ensuite une bombe ou un espace vide
    # au hasard pour former la grille finale (liste de K bombes et le reste (M*N - K) vides
    selection_grid: list = (["üí£"] * K) + (["  "] * (M * N - K))
    for x in range(M):
        row: list = []
        # pour chaque √©l√©ment de row, on ajoute un √©l√©ment de la s√©lection au hasard selon le nb N
        for y in range(N):
            grid_item = random.choice(selection_grid)
            row.append(grid_item)
            # on supprime l'√©l√©ment de la liste de s√©lection en cherchant son index dans la liste
            selection_grid.pop(selection_grid.index(grid_item))
        grid.append(row)
    return grid

grid_2 = generate_mixed_grid(10, 10, 28)

# print_grid(grid_2)



# Etape 2 - Cachez cette grille que je ne saurais voir !
# Mais imaginez, si la grille √©tait d'abord neutre, et que vous puissiez, les une apr√®s les autres, s√©lectionner les cases
# (par exemple en renseignant leurs coordonn√©es en ligne de commande), et les d√©couvrir : soit pleines (ou noires, ou True),
# soit vides (ou blanches, ou False) ?

# Il vous faut pour cela une logique en boucle :

# La grille est affich√©e dans un certain √©tat A. Au d√©but, cette √©tat est "neutre" : on ne connait pas le contenu des cases.
# Le jeu attend une action, un ordre ; vous l'ex√©cutez (vous renseignez des coordonn√©es par exemple, ou - si vous vous √™tes
# d√©j√† diversifi√© dans le graphisme - vous cliquer sur une case, ...).
# Le jeu vous affiche le nouvel √©tat B de la grille (l'√©tat A plus le r√©sultat de votre action).
# On recommence la boucle avec ce nouvel √©tat B.

rows:int = 10
columns:int = 10
nb_of_bombs:int =30
neutral_grid: list = generate_grid(rows, columns)
real_grid: list = generate_mixed_grid(rows, columns, nb_of_bombs)

def pick_case(index_nb, empty_grid, full_grid)-> list:
    single_list_empty_grid = [item for row in empty_grid for item in row]
    single_list_full_grid = [item for row in full_grid for item in row]
    single_list_empty_grid[index_nb] = single_list_full_grid[index_nb]
    return single_list_empty_grid

def print_grid_2(single_list_empty_grid, M, N):
    for i in range(M):
        # s√©pare la liste en 10 par 10 pour afficher en grille
        row = single_list_empty_grid[i*N:(i+1)*N]
        print(" ".join(row))

grid_2 = pick_case(5, neutral_grid, real_grid)

print_grid_2(grid_2, rows, columns)

grid_3 = pick_case(54, grid_2, real_grid)

print("     ")

print_grid_2(grid_3, rows, columns)

